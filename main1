package main

import (
  "fmt"
  "bat/fn"
  "sync"
  "time"
)
func main(){
  fn.Banner()
  fmt.Println("扫描开始，请耐心等待")
  
  //初始化一个长度为10的字符串切片，用于存储CIDR格式的网段
  cidrs:=make([]string,10)
  
  //获取网段ip
  cidrs=fn.Getlocalip()
  
  //定义一个用于存储ip的切片
  var allIPs []string

  //遍历每个cidr地址段
  for _,cidr:=range cidrs{
    //遍历每个CIDR地址段，使用GenerateIPs生成对应的ip地址列表
    ips,err:=fn.GenerateIPs(cidr)

    //错误处理
    if err!=nil{
      fmt.Println("Error:",err)
      continue
    }
    //将生成的ip地址追加到allIPs切片中
    allIPs=append(allIPs,ips...)
  }

  var commonPorts = []int{80, 443, 22, 21, 3389,25,23,137,138,139,3389}


	// 并发扫描
	var wg sync.WaitGroup
	results := make(chan string, len(allIPs))

	start := time.Now()
	for _, ip := range allIPs {
		wg.Add(1)
		go func(ip string) {
			defer wg.Done()
			if fn.IcmpScan(ip) || fn.TcpScan(ip, commonPorts) {
				results <- ip
			}
		}(ip)
	}

	wg.Wait()
	close(results)

	// 输出扫描结果信息
	fmt.Println("存活主机：")
	for ip := range results {
		fmt.Println(ip)
	}

  //生成报告文件

  //输出扫描结果信息
  fmt.Println("扫描报告已生成：result.html")
  fmt.Println("用时：",time.Since(start).String())
}
